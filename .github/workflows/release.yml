name: Build & Package Docker Releases

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Actions
            dockerfile: "Actions.Dockerfile"
            image: ghcr.io/penpow/sentry-actions

          - name: Sentry
            dockerfile: "Bot.Dockerfile"
            image: ghcr.io/penpow/sentry

          - name: ClamAV
            dockerfile: "ClamAV.Dockerfile"
            image: ghcr.io/penpow/sentry-clamav

          - name: Clamd
            dockerfile: "Clamd.Dockerfile"
            image: ghcr.io/penpow/clamd

          - name: Phishertools
            dockerfile: "Phishertools.Dockerfile"
            image: ghcr.io/penpow/phishertools

          - name: REST
            dockerfile: "Rest.Dockerfile"
            image: ghcr.io/penpow/sentry-rest

          - name: WS
            dockerfile: "Websocket.Dockerfile"
            image: ghcr.io/penpow/sentry-ws


    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ matrix.image }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
